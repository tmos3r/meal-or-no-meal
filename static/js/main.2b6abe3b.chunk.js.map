{"version":3,"sources":["logo.svg","layout/styles/Logo.module.css","layout/styles/NavBar.module.css","components/home/styles/Home.module.css","layout/Logo.js","layout/NavBar.js","layout/Layout.js","components/home/Calendar.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","styles","logo","data-testid","src","img","alt","NavBar","navbar","Layout","Calendar","Home","home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,yLCaVC,EARF,WACT,OACI,6BACI,yBAAKC,UAAWC,IAAOC,KAAMC,cAAY,OAAOC,IAAKC,IAAKC,IAAI,O,gBCK3DC,EARA,WACX,OACI,yBAAKP,UAAWC,IAAOO,OAAQL,cAAY,UACvC,kBAAC,EAAD,QCGGM,EARA,WACX,OACI,kBAAC,EAAD,O,QCMOC,EARE,WACb,OACI,yBAAKV,WAAS,EAACG,cAAY,YACvB,kBAAC,IAAD,Q,gBCOGQ,EARF,WACT,OACI,yBAAKX,UAAWC,IAAOW,MACnB,kBAAC,EAAD,QCUGC,G,MAZH,WACV,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,yBAAKb,UAAU,WACb,kBAAC,EAAD,UCAYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b6abe3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.42e1d8a9.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__2nGMH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__3KC8k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__AewG6\"};","import React from 'react';\r\n\r\nimport img from '../logo.svg';\r\n\r\nimport styles from './styles/Logo.module.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div>\r\n            <img className={styles.logo} data-testid=\"logo\" src={img} alt=\"\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nimport Logo from './Logo';\r\n\r\nimport styles from './styles/NavBar.module.css';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className={styles.navbar} data-testid=\"navBar\">\r\n            <Logo />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nimport NavBar from './NavBar';\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <NavBar>\r\n\r\n        </NavBar>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React from 'react';\r\n\r\nimport { CalendarComponent } from '@syncfusion/ej2-react-calendars';\r\n\r\nconst Calendar = () => {\r\n    return (\r\n        <div className data-testid=\"calendar\">\r\n            <CalendarComponent />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Calendar;","import React from 'react';\r\n\r\nimport Calendar from './Calendar';\r\n\r\nimport styles from './styles/Home.module.css';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className={styles.home}>\r\n            <Calendar />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, { Fragment } from 'react';\r\n\r\nimport Layout from './layout/Layout';\r\nimport Home from './components/home/Home';\r\n\r\nimport './layout/styles/all.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Fragment>\r\n      <Layout />\r\n      <div className=\"content\">\r\n        <Home />\r\n      </div>\r\n    </Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}